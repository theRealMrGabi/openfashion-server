#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config()

const http = require('http')

const app = require('../dist/app').default
const config = require('../dist/config').default
const Startup = require('../dist/startup').Startup

const debug = require('debug')('open-fashion:server')

const normalizePort = (val) => {
	const port = parseInt(val, 10)

	if (isNaN(port)) {
		// named pipe
		return val
	}

	if (port >= 0) {
		// port number
		return port
	}

	return false
}

const port = normalizePort(config.PORT || '7540')

const setupExpress = () => {
	/**
	 * Create HTTP server.
	 */

	const server = http.createServer(app)

	/**
	 * Get port from environment and store in Express.
	 */
	app.set('port', port)

	debug('Port', port)

	/**
	 * Listen on provided port, on all network interfaces.
	 */

	server.listen(port)
	server.on('error', (error) => {
		onError(error, port)
	})
	server.on('listening', () => {
		const addr = server.address()
		const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
		debug('Listening on ' + bind)
		console.log('server running on port ' + port)
	})

	console.log(`Worker ${process.pid} started`)
}

/**
 * Normalize a port into a number, string, or false.
 */

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error) => {
	if (error.syscall !== 'listen') {
		throw error
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges')
			process.exit(1)
			break
		case 'EADDRINUSE':
			console.error(bind + ' is already in use')
			process.exit(1)
			break
		default:
			throw error
	}
}

setupExpress()
Startup()
